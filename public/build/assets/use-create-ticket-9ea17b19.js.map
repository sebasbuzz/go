{"version":3,"file":"use-create-ticket-9ea17b19.js","sources":["../../../node_modules/@tanstack/query-core/build/modern/infiniteQueryObserver.js","../../../node_modules/@tanstack/react-query/build/modern/useInfiniteQuery.js","../../../resources/client/agent/ticket-layout/ticket-type-request-tag.tsx","../../../common/resources/client/ui/images/user-avatar.tsx","../../../resources/client/agent/ticket-actions/requests/use-change-ticket-status.tsx","../../../common/resources/client/ui/infinite-scroll/infinite-scroll-sentinel.tsx","../../../resources/client/agent/agent-ticket-page/ticket-page-store.ts","../../../common/resources/client/ui/infinite-scroll/use-infinite-data.ts","../../../resources/client/agent/agent-ticket-page/reply-list/requests/use-ticket-replies.ts","../../../resources/client/agent/customer-page/customer-link.tsx","../../../resources/client/agent/agent-ticket-page/agent-reply-editor/use-open-reply-editor.ts","../../../resources/client/agent/agent-ticket-page/reply-list/requests/use-delete-draft.ts","../../../resources/client/agent/agent-ticket-page/reply-list/reply-list-draft-actions.tsx","../../../resources/client/agent/ticket-layout/ticket-reply-layout.tsx","../../../resources/client/reply-editor/send-reply-button.tsx","../../../resources/client/agent/agent-new-ticket-page/use-create-ticket.ts"],"sourcesContent":["// src/infiniteQueryObserver.ts\nimport { QueryObserver } from \"./queryObserver.js\";\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior\n} from \"./infiniteQueryBehavior.js\";\nvar InfiniteQueryObserver = class extends QueryObserver {\n  constructor(client, options) {\n    super(client, options);\n  }\n  bindMethods() {\n    super.bindMethods();\n    this.fetchNextPage = this.fetchNextPage.bind(this);\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this);\n  }\n  setOptions(options, notifyOptions) {\n    super.setOptions(\n      {\n        ...options,\n        behavior: infiniteQueryBehavior()\n      },\n      notifyOptions\n    );\n  }\n  getOptimisticResult(options) {\n    options.behavior = infiniteQueryBehavior();\n    return super.getOptimisticResult(options);\n  }\n  fetchNextPage(options) {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: \"forward\" }\n      }\n    });\n  }\n  fetchPreviousPage(options) {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: \"backward\" }\n      }\n    });\n  }\n  createResult(query, options) {\n    const { state } = query;\n    const result = super.createResult(query, options);\n    const { isFetching, isRefetching } = result;\n    const isFetchingNextPage = isFetching && state.fetchMeta?.fetchMore?.direction === \"forward\";\n    const isFetchingPreviousPage = isFetching && state.fetchMeta?.fetchMore?.direction === \"backward\";\n    return {\n      ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, state.data),\n      hasPreviousPage: hasPreviousPage(options, state.data),\n      isFetchingNextPage,\n      isFetchingPreviousPage,\n      isRefetching: isRefetching && !isFetchingNextPage && !isFetchingPreviousPage\n    };\n  }\n};\nexport {\n  InfiniteQueryObserver\n};\n//# sourceMappingURL=infiniteQueryObserver.js.map","\"use client\";\n\n// src/useInfiniteQuery.ts\nimport { InfiniteQueryObserver } from \"@tanstack/query-core\";\nimport { useBaseQuery } from \"./useBaseQuery.js\";\nfunction useInfiniteQuery(options, queryClient) {\n  return useBaseQuery(\n    options,\n    InfiniteQueryObserver,\n    queryClient\n  );\n}\nexport {\n  useInfiniteQuery\n};\n//# sourceMappingURL=useInfiniteQuery.js.map","import { useCustomerTicketRequestType } from \"../agent-ticket-page/requests/use-ticket\";\r\n\r\ninterface Props {\r\n  ticketRequestType: number;\r\n}\r\n\r\nconst badget = \"relative flex flex-shrink-0 items-center justify-center gap-10 overflow-hidden whitespace-nowrap outline-none after:pointer-events-none rounded-full bg-chip text-main pl-8 h-20 text-xs font-medium hover:after:bg-black/5 focus:after:bg-black/10\"\r\n\r\nexport function TicketTypeRequestTag ( {ticketRequestType} : Props) {\r\n  const query = useCustomerTicketRequestType(ticketRequestType);\r\n\r\n  return (<>\r\n      {query && query.data && (\r\n        <div className={badget}>{query.data.ticket_request_type?.display_name}</div>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TicketTypeRequestTag","import {Avatar, AvatarProps} from '@common/ui/images/avatar';\nimport {User} from '@common/auth/user';\nimport {useContext} from 'react';\nimport {SiteConfigContext} from '@common/core/settings/site-config-context';\n\ninterface UserAvatarProps extends Omit<AvatarProps, 'label' | 'src' | 'link'> {\n  user?: User;\n}\nexport function UserAvatar({user, ...props}: UserAvatarProps) {\n  const {auth} = useContext(SiteConfigContext);\n  return (\n    <Avatar\n      {...props}\n      label={user?.display_name}\n      src={user?.avatar}\n      link={user?.id && auth.getUserProfileLink?.(user)}\n    />\n  );\n}\n","import {useMutation} from '@tanstack/react-query';\nimport {apiClient, queryClient} from '@common/http/query-client';\nimport {BackendResponse} from '@common/http/backend-response/backend-response';\nimport {showHttpErrorToast} from '@common/utils/http/show-http-error-toast';\n\ninterface Payload {\n  ids: (number | string)[];\n  status: string;\n}\n\nexport function useChangeTicketStatus() {\n  return useMutation({\n    mutationFn: (payload: Payload) => changeStatus(payload),\n    onSuccess: async () => {\n      queryClient.invalidateQueries({queryKey: ['mailbox', 'sidenav-tags']});\n      await queryClient.invalidateQueries({queryKey: ['tickets']});\n    },\n    onError: err => showHttpErrorToast(err),\n  });\n}\n\nfunction changeStatus(payload: Payload) {\n  return apiClient\n    .post<BackendResponse>(`tickets/status/change`, payload)\n    .then(r => r.data);\n}\n","import React, {ReactNode, useEffect, useRef, useState} from 'react';\nimport clsx from 'clsx';\nimport {UseInfiniteQueryResult} from '@tanstack/react-query/src/types';\nimport {Trans} from '@common/i18n/trans';\nimport {Button} from '@common/ui/buttons/button';\nimport {AnimatePresence, m} from 'framer-motion';\nimport {opacityAnimation} from '@common/ui/animation/opacity-animation';\nimport {ProgressCircle} from '@common/ui/progress/progress-circle';\n\nexport interface InfiniteScrollSentinelProps {\n  loaderMarginTop?: string;\n  children?: ReactNode;\n  loadMoreExtraContent?: ReactNode;\n  query: UseInfiniteQueryResult;\n  style?: React.CSSProperties;\n  className?: string;\n  variant?: 'infiniteScroll' | 'loadMore';\n  size?: 'sm' | 'md';\n}\nexport function InfiniteScrollSentinel({\n  query: {isInitialLoading, fetchNextPage, isFetchingNextPage, hasNextPage},\n  children,\n  loaderMarginTop = 'mt-24',\n  style,\n  className,\n  variant: _variant = 'infiniteScroll',\n  loadMoreExtraContent,\n  size = 'md',\n}: InfiniteScrollSentinelProps) {\n  const sentinelRef = useRef<HTMLDivElement>(null);\n  const isLoading = isFetchingNextPage || isInitialLoading;\n  const [loadMoreClickCount, setLoadMoreClickCount] = useState(0);\n  const innerVariant =\n    _variant === 'loadMore' && loadMoreClickCount < 3\n      ? 'loadMore'\n      : 'infiniteScroll';\n\n  useEffect(() => {\n    const sentinelEl = sentinelRef.current;\n    if (!sentinelEl || innerVariant === 'loadMore') return;\n    const observer = new IntersectionObserver(([entry]) => {\n      if (entry.isIntersecting && hasNextPage && !isLoading) {\n        fetchNextPage();\n      }\n    });\n    observer.observe(sentinelEl);\n    return () => {\n      observer.unobserve(sentinelEl);\n    };\n  }, [fetchNextPage, hasNextPage, isLoading, innerVariant]);\n\n  let content: ReactNode;\n\n  if (children) {\n    // children might already be wrapped in AnimatePresence, so only wrap default loader with it\n    content = isFetchingNextPage ? children : null;\n  } else if (innerVariant === 'loadMore') {\n    content = !isInitialLoading && hasNextPage && (\n      <div className={clsx('flex items-center gap-8', loaderMarginTop)}>\n        {loadMoreExtraContent}\n        <Button\n          size={size === 'md' ? 'sm' : 'xs'}\n          className={clsx(\n            size === 'sm' ? 'min-h-24 min-w-96' : 'min-h-36 min-w-112'\n          )}\n          variant=\"outline\"\n          color=\"primary\"\n          onClick={() => {\n            fetchNextPage();\n            setLoadMoreClickCount(loadMoreClickCount + 1);\n          }}\n          disabled={isLoading}\n        >\n          {loadMoreClickCount >= 2 && !isFetchingNextPage ? (\n            <Trans message=\"Load all\" />\n          ) : (\n            <Trans message=\"Show more\" />\n          )}\n        </Button>\n      </div>\n    );\n  } else {\n    content = (\n      <AnimatePresence>\n        {isFetchingNextPage && (\n          <m.div\n            className={clsx('flex justify-center w-full', loaderMarginTop)}\n            {...opacityAnimation}\n          >\n            <ProgressCircle size={size} isIndeterminate aria-label=\"loading\" />\n          </m.div>\n        )}\n      </AnimatePresence>\n    );\n  }\n\n  return (\n    <div\n      style={style}\n      className={clsx('w-full', className, hasNextPage && 'min-h-36')}\n      role=\"presentation\"\n    >\n      <div ref={sentinelRef} aria-hidden />\n      {content}\n    </div>\n  );\n}\n","import {create} from 'zustand';\nimport {FileEntry} from '@common/uploads/file-entry';\n\nexport interface ActiveDraft {\n  id?: number;\n  body?: string;\n  attachments: FileEntry[];\n  isDirty: boolean;\n  isSaving: boolean;\n}\n\nexport interface TicketPageStore {\n  editorIsOpen: boolean;\n  setEditorIsOpen: (value: boolean) => void;\n  ticketIsSaving: boolean;\n  setTicketIsSaving: (value: boolean) => void;\n  activeDraft: ActiveDraft;\n  updateActiveDraft: (value: Partial<ActiveDraft>) => void;\n  discardActiveDraft: () => void;\n}\n\nexport const defaultDraftValues: ActiveDraft = {\n  isDirty: false,\n  isSaving: false,\n  body: undefined,\n  attachments: [],\n};\n\nexport const useTicketPageStore = create<TicketPageStore>()(set => ({\n  editorIsOpen: false,\n  setEditorIsOpen: value => set(s => ({editorIsOpen: value})),\n  ticketIsSaving: false,\n  setTicketIsSaving: value => set(s => ({ticketIsSaving: value})),\n  activeDraft: defaultDraftValues,\n  updateActiveDraft: value =>\n    set(s => {\n      const isDirty = !isBodyEmpty(value.body) || !!value.attachments?.length;\n      return {\n        activeDraft: {\n          ...s.activeDraft,\n          isDirty,\n          ...value,\n        },\n      };\n    }),\n  discardActiveDraft: () =>\n    set(() => ({\n      activeDraft: defaultDraftValues,\n    })),\n}));\n\nexport function ticketPageStore() {\n  return useTicketPageStore.getState();\n}\n\nfunction isBodyEmpty(body: string | undefined): boolean {\n  if (!body) return true;\n  return body.trim() === '<p></p>' || !body.trim();\n}\n","import {\n  hashKey,\n  InfiniteData,\n  keepPreviousData,\n  useInfiniteQuery,\n  UseInfiniteQueryResult,\n} from '@tanstack/react-query';\nimport {apiClient} from '@common/http/query-client';\nimport {BackendResponse} from '@common/http/backend-response/backend-response';\nimport {\n  hasNextPage,\n  PaginationResponse,\n} from '@common/http/backend-response/pagination-response';\nimport {useMemo, useRef, useState} from 'react';\nimport {SortDescriptor} from '@common/ui/tables/types/sort-descriptor';\nimport {GetDatatableDataParams} from '@common/datatable/requests/paginated-resources';\nimport {QueryKey} from '@tanstack/query-core/src/types';\n\nexport type UseInfiniteDataResult<\n  T,\n  E extends object = object,\n> = UseInfiniteQueryResult<InfiniteData<PaginationResponse<T> & E>> & {\n  items: T[];\n  totalItems: number | null;\n  // initial load is done and no results were returned from backend\n  noResults: boolean;\n  // true when changing filters or sorting, not on initial load, background fetch or infinite load\n  isReloading: boolean;\n  sortDescriptor: SortDescriptor;\n  setSortDescriptor: (sortDescriptor: SortDescriptor) => void;\n  searchQuery: string;\n  setSearchQuery: (searchQuery: string) => void;\n};\n\nfunction buildQueryKey(\n  {\n    queryKey,\n    defaultOrderDir,\n    defaultOrderBy,\n    queryParams,\n  }: UseInfiniteDataProps<any>,\n  sortDescriptor: SortDescriptor,\n  searchQuery: string = '',\n) {\n  // make sure to always set default order dir and col so query keys are consistent\n  if (!sortDescriptor.orderBy) {\n    sortDescriptor.orderBy = defaultOrderBy;\n  }\n  if (!sortDescriptor.orderDir) {\n    sortDescriptor.orderDir = defaultOrderDir;\n  }\n  return [...queryKey, sortDescriptor, searchQuery, queryParams];\n}\n\ninterface Response<T> extends BackendResponse {\n  pagination: PaginationResponse<T>;\n}\n\nexport interface UseInfiniteDataProps<T> {\n  initialPage?: PaginationResponse<T> | null;\n  queryKey: QueryKey;\n  queryParams?: Record<string, string | number | null>;\n  endpoint: string;\n  defaultOrderBy?: SortDescriptor['orderBy'];\n  defaultOrderDir?: SortDescriptor['orderDir'];\n  // whether user can sort items manually (table header, dropdown, etc)\n  willSortOrFilter?: boolean;\n  // ordering is not available with cursor pagination\n  paginate?: 'simple' | 'lengthAware' | 'cursor';\n  transformResponse?: (response: Response<T>) => Response<T>;\n}\nexport function useInfiniteData<T, E extends object = {}>(\n  props: UseInfiniteDataProps<T>,\n): UseInfiniteDataResult<T, E> {\n  const {\n    initialPage,\n    endpoint,\n    defaultOrderBy,\n    defaultOrderDir,\n    queryParams,\n    paginate,\n    transformResponse,\n    willSortOrFilter = false,\n  } = props;\n  const [searchQuery, setSearchQuery] = useState('');\n  const [sortDescriptor, setSortDescriptor] = useState<SortDescriptor>({\n    orderBy: defaultOrderBy,\n    orderDir: defaultOrderDir,\n  });\n\n  const queryKey = buildQueryKey(props, sortDescriptor, searchQuery);\n  const initialQueryKey = useRef(hashKey(queryKey)).current;\n\n  const query = useInfiniteQuery({\n    placeholderData: willSortOrFilter ? keepPreviousData : undefined,\n    queryKey,\n    queryFn: ({pageParam, signal}) => {\n      const params: GetDatatableDataParams = {\n        ...queryParams,\n        perPage: initialPage?.per_page || queryParams?.perPage,\n        query: searchQuery,\n        paginate,\n        ...sortDescriptor,\n      };\n      if (paginate === 'cursor') {\n        params.cursor = pageParam;\n      } else {\n        params.page = pageParam || 1;\n      }\n      return fetchData<T>(endpoint, params, transformResponse, signal);\n    },\n    initialPageParam: paginate === 'cursor' ? '' : 1,\n    getNextPageParam: lastResponse => {\n      if (!hasNextPage(lastResponse.pagination)) {\n        return null;\n      }\n      if ('next_cursor' in lastResponse.pagination) {\n        return lastResponse.pagination.next_cursor;\n      }\n      return lastResponse.pagination.current_page + 1;\n    },\n    initialData: () => {\n      // initial data will be for initial query key only, remove\n      // initial data if query key changes, so query is reset\n      if (!initialPage || hashKey(queryKey) !== initialQueryKey) {\n        return undefined;\n      }\n\n      return {\n        pageParams: [undefined, 1],\n        pages: [{pagination: initialPage}],\n      };\n    },\n  });\n\n  const items = useMemo(() => {\n    return query.data?.pages.flatMap(p => p.pagination.data) || [];\n  }, [query.data?.pages]);\n\n  const firstPage = query.data?.pages[0].pagination;\n  const totalItems =\n    firstPage && 'total' in firstPage && firstPage.total\n      ? firstPage.total\n      : null;\n\n  return {\n    ...query,\n    items,\n    totalItems,\n    noResults: query.data?.pages?.[0].pagination.data.length === 0,\n    // can't use \"isRefetching\", it's true for some reason when changing sorting or filters\n    isReloading:\n      query.isFetching && !query.isFetchingNextPage && query.isPlaceholderData,\n    sortDescriptor,\n    setSortDescriptor,\n    searchQuery,\n    setSearchQuery,\n  } as UseInfiniteDataResult<T, E>;\n}\n\nasync function fetchData<T>(\n  endpoint: string,\n  params: GetDatatableDataParams,\n  transformResponse?: UseInfiniteDataProps<T>['transformResponse'],\n  signal?: AbortSignal,\n): Promise<Response<T>> {\n  if (params.query) {\n    await new Promise(resolve => setTimeout(resolve, 300));\n  }\n  return apiClient\n    .get(endpoint, {params, signal: params.query ? signal : undefined})\n    .then(r => {\n      if (transformResponse) {\n        return transformResponse(r.data);\n      }\n      return r.data;\n    });\n}\n","import {useInfiniteData} from '@common/ui/infinite-scroll/use-infinite-data';\nimport {SimplePaginationResponse} from '@common/http/backend-response/pagination-response';\nimport {Reply} from '@app/agent/reply';\n\nexport function useTicketReplies(\n  ticketId: number,\n  initialPage?: SimplePaginationResponse<Reply>\n) {\n  return useInfiniteData({\n    queryKey: ['tickets', `${ticketId}`, 'replies'],\n    endpoint: `tickets/${ticketId}/replies`,\n    initialPage,\n  });\n}\n","import {Link, LinkProps} from 'react-router-dom';\nimport clsx from 'clsx';\nimport React, {ReactNode, useMemo} from 'react';\nimport {getBootstrapData} from '@common/core/bootstrap-data/use-backend-bootstrap-data';\nimport {User} from '@common/auth/user';\n\ninterface Props extends Omit<LinkProps, 'to'> {\n  customer: User;\n  className?: string;\n  children?: ReactNode;\n  color?: 'primary' | 'inherit';\n}\nexport function CustomerLink({\n  customer,\n  className,\n  children,\n  color = 'inherit',\n  ...linkProps\n}: Props) {\n  const finalUri = useMemo(() => {\n    return getCustomerLink(customer.id);\n  }, [customer]);\n\n  return (\n    <Link\n      {...linkProps}\n      className={clsx(\n        color === 'primary'\n          ? 'text-primary hover:text-primary-dark'\n          : 'text-inherit',\n        'overflow-x-hidden overflow-ellipsis outline-none transition-colors hover:underline focus-visible:underline',\n        className,\n      )}\n      to={finalUri}\n    >\n      {children ?? customer.display_name}\n    </Link>\n  );\n}\n\nexport function getCustomerLink(\n  userId: number | string,\n  {absolute, tab}: {absolute?: boolean; tab?: string} = {},\n): string {\n  if (!tab) {\n    tab = 'tickets';\n  }\n  let link = `/agent/users/${userId}/${tab}`;\n  if (absolute) {\n    link = `${getBootstrapData().settings.base_url}${link}`;\n  }\n  return link;\n}\n","import {useCallback} from 'react';\nimport {useTicket} from '@app/agent/agent-ticket-page/requests/use-ticket';\nimport {ticketPageStore} from '@app/agent/agent-ticket-page/ticket-page-store';\n\nexport function useOpenReplyEditor() {\n  const {data} = useTicket();\n  return useCallback(() => {\n    if (!data) return;\n    if (data.draft) {\n      ticketPageStore().updateActiveDraft({\n        ...data.draft,\n        isDirty: false,\n      });\n    }\n    ticketPageStore().setEditorIsOpen(true);\n  }, [data]);\n}\n","import {useMutation} from '@tanstack/react-query';\nimport {apiClient, queryClient} from '@common/http/query-client';\nimport {showHttpErrorToast} from '@common/utils/http/show-http-error-toast';\nimport {useTicketPageStore} from '@app/agent/agent-ticket-page/ticket-page-store';\nimport {useParams} from 'react-router-dom';\n\ninterface Payload {\n  id: number;\n}\n\ninterface Options {\n  clearTicketCache?: boolean;\n}\n\nexport function useDeleteDraft({clearTicketCache = true}: Options = {}) {\n  const {ticketId} = useParams();\n  const {updateActiveDraft, discardActiveDraft} = useTicketPageStore();\n  return useMutation({\n    mutationFn: (payload: Payload) => {\n      updateActiveDraft({isSaving: true});\n      return deleteDraft(payload);\n    },\n    onSuccess: async () => {\n      discardActiveDraft();\n      if (clearTicketCache) {\n        await queryClient.invalidateQueries({\n          queryKey: ['tickets', `${ticketId}`],\n        });\n      }\n    },\n    onError: err => showHttpErrorToast(err),\n    onSettled: () => updateActiveDraft({isSaving: false}),\n  });\n}\n\nfunction deleteDraft(payload: Payload) {\n  return apiClient.delete(`replies/${payload.id}`).then(r => r.data);\n}\n","import React, {Fragment} from 'react';\nimport {Button} from '@common/ui/buttons/button';\nimport {Trans} from '@common/i18n/trans';\nimport {useOpenReplyEditor} from '@app/agent/agent-ticket-page/agent-reply-editor/use-open-reply-editor';\nimport {Reply} from '@app/agent/reply';\nimport {DialogTrigger} from '@common/ui/overlays/dialog/dialog-trigger';\nimport {useDeleteDraft} from '@app/agent/agent-ticket-page/reply-list/requests/use-delete-draft';\nimport {useDialogContext} from '@common/ui/overlays/dialog/dialog-context';\nimport {ConfirmationDialog} from '@common/ui/overlays/dialog/confirmation-dialog';\n\ninterface Props {\n  draft: Reply;\n}\nexport function ReplyListDraftActions({draft}: Props) {\n  const openEditor = useOpenReplyEditor();\n  return (\n    <Fragment>\n      <Button\n        variant=\"outline\"\n        size=\"2xs\"\n        className=\"ml-14\"\n        onClick={() => openEditor()}\n      >\n        <Trans message=\"Edit\" />\n      </Button>\n      <DeleteDraftButton draft={draft} />\n    </Fragment>\n  );\n}\n\ninterface DeleteDraftButtonProps {\n  draft: Reply;\n}\nfunction DeleteDraftButton({draft}: DeleteDraftButtonProps) {\n  return (\n    <DialogTrigger type=\"modal\">\n      <Button variant=\"outline\" size=\"2xs\" className=\"ml-6\">\n        <Trans message=\"Discard\" />\n      </Button>\n      <DeleteDraftDialog draft={draft} />\n    </DialogTrigger>\n  );\n}\n\ninterface DeleteDraftDialogProps {\n  draft: Reply;\n}\nfunction DeleteDraftDialog({draft}: DeleteDraftDialogProps) {\n  const deleteDraft = useDeleteDraft();\n  const {close} = useDialogContext();\n  return (\n    <ConfirmationDialog\n      isDanger\n      title={<Trans message=\"Discard draft\" />}\n      body={<Trans message=\"Are you sure you want to discard this draft?\" />}\n      confirm={<Trans message=\"Discard\" />}\n      onConfirm={() => deleteDraft.mutate({id: draft.id}, {onSuccess: close})}\n      isLoading={deleteDraft.isPending}\n    />\n  );\n}\n","import {Reply} from '@app/agent/reply';\r\nimport clsx from 'clsx';\r\nimport {Link} from 'react-router-dom';\r\nimport {getCustomerLink} from '@app/agent/customer-page/customer-link';\r\nimport {UserAvatar} from '@common/ui/images/user-avatar';\r\nimport {useAuth} from '@common/auth/use-auth';\r\nimport {Trans} from '@common/i18n/trans';\r\nimport {FormattedDate} from '@common/i18n/formatted-date';\r\nimport {ReplyListDraftActions} from '@app/agent/agent-ticket-page/reply-list/reply-list-draft-actions';\r\nimport React, {ReactNode, useEffect, useRef} from 'react';\r\nimport {highlightCode} from '@common/text-editor/highlight/highlight-code';\r\n\r\nconst replyDateFormat: Intl.DateTimeFormatOptions = {\r\n  month: 'short',\r\n  day: 'numeric',\r\n  hour: 'numeric',\r\n  minute: 'numeric',\r\n};\r\n\r\ninterface Props {\r\n  reply: Reply;\r\n  isInitial?: boolean;\r\n  actions?: ReactNode;\r\n  attachments?: ReactNode;\r\n  className?: string;\r\n  ticketRequestType: number;\r\n}\r\nexport function TicketReplyLayout({\r\n  reply,\r\n  isInitial,\r\n  actions,\r\n  attachments,\r\n  className,\r\n  ticketRequestType,\r\n}: Props) {\r\n  const bodyRef = useRef<HTMLDivElement>(null);\r\n  useEffect(() => {\r\n    if (bodyRef.current) {\r\n      highlightCode(bodyRef.current);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      className={clsx(\r\n        'flex items-start gap-20 border-x-2 border-t border-x-transparent py-24',\r\n        reply.type === 'drafts' && 'border-l-primary',\r\n        reply.type === 'notes' && 'border-l-warning bg-warning/6',\r\n        className,\r\n      )}\r\n    >\r\n      {reply.user && (\r\n        <Link\r\n          to={getCustomerLink(reply.user.id)}\r\n          className=\"flex-shrink-0 max-md:hidden\"\r\n          target=\"_blank\"\r\n        >\r\n          <UserAvatar user={reply.user} size=\"w-50 h-50\" circle />\r\n        </Link>\r\n      )}\r\n      <div className=\"min-w-0 flex-auto\">\r\n        <ReplyHeader reply={reply} isInitial={isInitial} actions={actions} />\r\n        <div\r\n          ref={bodyRef}\r\n          className=\"ticket-reply-body mr-24 text-sm\"\r\n          dangerouslySetInnerHTML={{__html: reply.body}}\r\n        />\r\n        {attachments}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\ninterface ReplyHeaderProps {\r\n  reply: Reply;\r\n  isInitial?: boolean;\r\n  actions?: ReactNode;\r\n}\r\nfunction ReplyHeader({reply, isInitial, actions}: ReplyHeaderProps) {\r\n  const {user: currentUser} = useAuth();\r\n  return (\r\n    <div className=\"mb-14 flex items-center\">\r\n      <div className=\"font-medium\">\r\n        {reply.user?.id === currentUser?.id ? (\r\n          <Trans message=\"You\" />\r\n        ) : (\r\n          reply.user?.display_name\r\n        )}\r\n      </div>\r\n      <div className=\"ml-4\">\r\n        <ReplySuffix reply={reply} isInitial={isInitial} />\r\n      </div>\r\n      <div className=\"ml-auto mr-4 flex-shrink-0 text-xs text-muted\">\r\n        <FormattedDate date={reply.created_at} options={replyDateFormat} />\r\n      </div>\r\n      {actions}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ReplySuffix({reply, isInitial}: ReplyHeaderProps) {\r\n  switch (reply.type) {\r\n    case 'drafts':\r\n      return (\r\n        <div className=\"flex items-center\">\r\n          <span className=\"text-primary\">\r\n            <Trans message=\"created a draft\" />\r\n          </span>\r\n          <ReplyListDraftActions draft={reply} />\r\n        </div>\r\n      );\r\n    case 'notes':\r\n      return (\r\n        <span className=\"text-warning\">\r\n          <Trans message=\"left a note\" />\r\n        </span>\r\n      );\r\n    case 'replies':\r\n      if (isInitial) {\r\n        return (\r\n          <span className=\"text-muted max-md:hidden\">\r\n            <Trans message=\"started the conversaion\" />\r\n          </span>\r\n        );\r\n      }\r\n      return (\r\n        <span className=\"text-muted\">\r\n          <Trans message=\"replied\" />\r\n        </span>\r\n      );\r\n  }\r\n}\r\n","import {Trans} from '@common/i18n/trans';\nimport {Button} from '@common/ui/buttons/button';\nimport React from 'react';\nimport {ReplyEditorToolbarButtonsProps} from '@app/reply-editor/reply-editor';\n\nexport function SendReplyButton({\n  isLoading,\n  onSubmit,\n}: ReplyEditorToolbarButtonsProps) {\n  return (\n    <Button\n      variant=\"flat\"\n      color=\"primary\"\n      radius=\"rounded-none\"\n      disabled={isLoading}\n      onClick={() => onSubmit?.()}\n    >\n      <Trans message=\"Send reply\" />\n    </Button>\n  );\n}\n","import {useMutation} from '@tanstack/react-query';\r\nimport {apiClient, queryClient} from '@common/http/query-client';\r\nimport {toast} from '@common/ui/toast/toast';\r\nimport {message} from '@common/i18n/message';\r\nimport {Ticket} from '@app/agent/ticket';\r\nimport {UseFormReturn} from 'react-hook-form';\r\nimport {onFormQueryError} from '@common/errors/on-form-query-error';\r\nimport {SearchSessionItem} from '@app/help-center/search/use-search-term-logger';\r\n\r\ninterface Response {\r\n  ticket: Ticket;\r\n}\r\n\r\nexport interface CreateTicketPayload {\r\n  user_id: number;\r\n  subject: string;\r\n  category_id: number;\r\n  ticket_request_type: number;\r\n  status: string;\r\n  body: string;\r\n  attachments?: number[];\r\n  created_by_agent?: boolean;\r\n  suggestionLog?: SearchSessionItem[];\r\n}\r\n\r\nexport function useCreateTicket(form: UseFormReturn<CreateTicketPayload>) {\r\n  return useMutation({\r\n    mutationFn: (payload: CreateTicketPayload) => createTicket(payload),\r\n    onSuccess: async () => {\r\n      await queryClient.invalidateQueries({queryKey: ['tickets']});\r\n      toast(message('Ticket created'));\r\n    },\r\n    onError: err => onFormQueryError(err, form),\r\n  });\r\n}\r\n\r\nfunction createTicket(payload: CreateTicketPayload) {\r\n  return apiClient.post<Response>(`tickets`, payload).then(r => r.data);\r\n}\r\n"],"names":["InfiniteQueryObserver","QueryObserver","client","options","notifyOptions","infiniteQueryBehavior","query","state","result","isFetching","isRefetching","isFetchingNextPage","_b","_a","isFetchingPreviousPage","_d","_c","hasNextPage","hasPreviousPage","useInfiniteQuery","queryClient","useBaseQuery","badget","TicketTypeRequestTag","ticketRequestType","useCustomerTicketRequestType","jsx","Fragment","UserAvatar","user","props","auth","useContext","SiteConfigContext","Avatar","useChangeTicketStatus","useMutation","payload","changeStatus","err","showHttpErrorToast","apiClient","r","InfiniteScrollSentinel","isInitialLoading","fetchNextPage","children","loaderMarginTop","style","className","_variant","loadMoreExtraContent","size","sentinelRef","useRef","isLoading","loadMoreClickCount","setLoadMoreClickCount","useState","innerVariant","useEffect","sentinelEl","observer","entry","content","jsxs","clsx","Button","Trans","AnimatePresence","m","opacityAnimation","ProgressCircle","defaultDraftValues","useTicketPageStore","create","set","value","s","isDirty","isBodyEmpty","ticketPageStore","body","buildQueryKey","queryKey","defaultOrderDir","defaultOrderBy","queryParams","sortDescriptor","searchQuery","useInfiniteData","initialPage","endpoint","paginate","transformResponse","willSortOrFilter","setSearchQuery","setSortDescriptor","initialQueryKey","hashKey","keepPreviousData","pageParam","signal","params","fetchData","lastResponse","items","useMemo","p","firstPage","totalItems","resolve","useTicketReplies","ticketId","getCustomerLink","userId","absolute","tab","link","getBootstrapData","useOpenReplyEditor","data","useTicket","useCallback","useDeleteDraft","clearTicketCache","useParams","updateActiveDraft","discardActiveDraft","deleteDraft","ReplyListDraftActions","draft","openEditor","DeleteDraftButton","DialogTrigger","DeleteDraftDialog","close","useDialogContext","ConfirmationDialog","replyDateFormat","TicketReplyLayout","reply","isInitial","actions","attachments","bodyRef","highlightCode","Link","ReplyHeader","currentUser","useAuth","ReplySuffix","FormattedDate","SendReplyButton","onSubmit","useCreateTicket","form","createTicket","toast","message","onFormQueryError"],"mappings":"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","x_google_ignoreList":[0,1]}