{"version":3,"file":"dashboard-sidenav-7196eed0.js","sources":["../../../common/resources/client/ui/layout/dashboard-layout-context.ts","../../../common/resources/client/utils/hooks/use-previous.ts","../../../common/resources/client/uploads/formatted-bytes.tsx","../../../common/resources/client/utils/hooks/use-block-body-overflow.ts","../../../common/resources/client/ui/layout/dashboard-layout.tsx","../../../common/resources/client/icons/material/MenuOpen.tsx","../../../common/resources/client/ui/layout/dashboard-navbar.tsx","../../../common/resources/client/ui/layout/dashboard-content.tsx","../../../common/resources/client/ui/layout/dashboard-sidenav.tsx"],"sourcesContent":["import {createContext} from 'react';\n\nexport type DashboardSidenavStatus = 'open' | 'closed' | 'compact';\n\nexport interface DashboardContextValue {\n  leftSidenavStatus: DashboardSidenavStatus;\n  setLeftSidenavStatus: (status: DashboardSidenavStatus) => void;\n  rightSidenavStatus: DashboardSidenavStatus;\n  setRightSidenavStatus: (status: DashboardSidenavStatus) => void;\n  isMobileMode: boolean | null;\n  leftSidenavCanBeCompact?: boolean;\n  name: string;\n}\n\nexport const DashboardLayoutContext = createContext<DashboardContextValue>(\n  null!\n);\n","import {useEffect, useRef} from 'react';\n\nexport function usePrevious<T>(value: T) {\n  const ref = useRef<T>();\n  // Store current value in ref\n  useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n}\n","import {Fragment, memo} from 'react';\nimport {prettyBytes} from './utils/pretty-bytes';\n\ninterface FormattedBytesProps {\n  bytes?: number;\n}\nexport const FormattedBytes = memo(({bytes}: FormattedBytesProps) => {\n  return <Fragment>{prettyBytes(bytes)}</Fragment>;\n});\n","import {useEffect} from 'react';\n\nexport function useBlockBodyOverflow(disable: boolean = false) {\n  useEffect(() => {\n    if (disable) {\n      document.documentElement.classList.remove('no-page-overflow');\n    } else {\n      document.documentElement.classList.add('no-page-overflow');\n    }\n    return () => {\n      document.documentElement.classList.remove('no-page-overflow');\n    };\n  }, [disable]);\n}\n","import {ComponentPropsWithoutRef, useCallback, useMemo} from 'react';\nimport {\n  DashboardLayoutContext,\n  DashboardSidenavStatus,\n} from './dashboard-layout-context';\nimport {Underlay} from '../overlays/underlay';\nimport {AnimatePresence} from 'framer-motion';\nimport {useControlledState} from '@react-stately/utils';\nimport {useMediaQuery} from '../../utils/hooks/use-media-query';\nimport {\n  getFromLocalStorage,\n  setInLocalStorage,\n} from '../../utils/hooks/local-storage';\nimport {useBlockBodyOverflow} from '../../utils/hooks/use-block-body-overflow';\nimport clsx from 'clsx';\n\ninterface DashboardLayoutProps extends ComponentPropsWithoutRef<'div'> {\n  name: string;\n  leftSidenavCanBeCompact?: boolean;\n  leftSidenavStatus?: DashboardSidenavStatus;\n  onLeftSidenavChange?: (status: DashboardSidenavStatus) => void;\n  rightSidenavStatus?: DashboardSidenavStatus;\n  initialRightSidenavStatus?: DashboardSidenavStatus;\n  onRightSidenavChange?: (status: DashboardSidenavStatus) => void;\n  height?: string;\n  gridClassName?: string;\n  blockBodyOverflow?: boolean;\n}\nexport function DashboardLayout({\n  children,\n  leftSidenavStatus: leftSidenav,\n  onLeftSidenavChange,\n  rightSidenavStatus: rightSidenav,\n  initialRightSidenavStatus,\n  onRightSidenavChange,\n  name,\n  leftSidenavCanBeCompact,\n  height = 'h-screen',\n  className,\n  gridClassName = 'dashboard-grid',\n  blockBodyOverflow = true,\n  ...domProps\n}: DashboardLayoutProps) {\n  useBlockBodyOverflow(!blockBodyOverflow);\n  const isMobile = useMediaQuery('(max-width: 1024px)');\n\n  const isCompactModeInitially = useMemo(() => {\n    return !name ? false : getFromLocalStorage(`${name}.sidenav.compact`);\n  }, [name]);\n  const defaultLeftSidenavStatus = isCompactModeInitially ? 'compact' : 'open';\n  const [leftSidenavStatus, setLeftSidenavStatus] = useControlledState(\n    leftSidenav,\n    isMobile ? 'closed' : defaultLeftSidenavStatus,\n    onLeftSidenavChange,\n  );\n\n  const rightSidenavStatusDefault = useMemo(() => {\n    if (isMobile) {\n      return 'closed';\n    }\n    if (initialRightSidenavStatus != null) {\n      return initialRightSidenavStatus;\n    }\n    const userSelected = getFromLocalStorage(\n      `${name}.sidenav.right.position`,\n      'open',\n    );\n    if (userSelected != null) {\n      return userSelected;\n    }\n    return initialRightSidenavStatus || 'closed';\n  }, [isMobile, name, initialRightSidenavStatus]);\n  const [rightSidenavStatus, _setRightSidenavStatus] = useControlledState(\n    rightSidenav,\n    rightSidenavStatusDefault,\n    onRightSidenavChange,\n  );\n  const setRightSidenavStatus = useCallback(\n    (status: DashboardSidenavStatus) => {\n      _setRightSidenavStatus(status);\n      setInLocalStorage(`${name}.sidenav.right.position`, status);\n    },\n    [_setRightSidenavStatus, name],\n  );\n\n  const shouldShowUnderlay =\n    isMobile && (leftSidenavStatus === 'open' || rightSidenavStatus === 'open');\n\n  return (\n    <DashboardLayoutContext.Provider\n      value={{\n        leftSidenavStatus,\n        setLeftSidenavStatus,\n        rightSidenavStatus,\n        setRightSidenavStatus,\n        leftSidenavCanBeCompact,\n        name,\n        isMobileMode: isMobile,\n      }}\n    >\n      <div\n        {...domProps}\n        className={clsx('relative isolate', gridClassName, className, height)}\n      >\n        {children}\n        <AnimatePresence>\n          {shouldShowUnderlay && (\n            <Underlay\n              position=\"fixed\"\n              key=\"dashboard-underlay\"\n              onClick={() => {\n                setLeftSidenavStatus('closed');\n                setRightSidenavStatus('closed');\n              }}\n            />\n          )}\n        </AnimatePresence>\n      </div>\n    </DashboardLayoutContext.Provider>\n  );\n}\n","import {createSvgIcon} from '../create-svg-icon';\n\nexport const MenuOpenIcon = createSvgIcon(\n  <path d=\"M3 18h13v-2H3v2zm0-5h10v-2H3v2zm0-7v2h13V6H3zm18 9.59L17.42 12 21 8.41 19.59 7l-5 5 5 5L21 15.59z\" />\n, 'MenuOpenOutlined');\n","import {Navbar, NavbarProps} from '../navigation/navbar/navbar';\nimport {IconButton} from '../buttons/icon-button';\nimport React, {useContext} from 'react';\nimport clsx from 'clsx';\nimport {DashboardLayoutContext} from './dashboard-layout-context';\nimport {setInLocalStorage} from '../../utils/hooks/local-storage';\nimport {MenuOpenIcon} from '@common/icons/material/MenuOpen';\n\nexport interface DashboardNavbarProps\n  extends Omit<NavbarProps, 'toggleButton'> {\n  hideToggleButton?: boolean;\n}\nexport function DashboardNavbar({\n  children,\n  className,\n  hideToggleButton,\n  ...props\n}: DashboardNavbarProps) {\n  const {\n    isMobileMode,\n    leftSidenavStatus,\n    setLeftSidenavStatus,\n    name,\n    leftSidenavCanBeCompact,\n  } = useContext(DashboardLayoutContext);\n\n  const shouldToggleCompactMode = leftSidenavCanBeCompact && !isMobileMode;\n  const shouldShowToggle =\n    !hideToggleButton && (isMobileMode || leftSidenavCanBeCompact);\n\n  const handleToggle = () => {\n    setLeftSidenavStatus(leftSidenavStatus === 'open' ? 'closed' : 'open');\n  };\n\n  const handleCompactModeToggle = () => {\n    const newStatus = leftSidenavStatus === 'compact' ? 'open' : 'compact';\n    setInLocalStorage(`${name}.sidenav.compact`, newStatus === 'compact');\n    setLeftSidenavStatus(newStatus);\n  };\n\n  return (\n    <Navbar\n      className={clsx('dashboard-grid-navbar', className)}\n      border=\"border-b\"\n      size=\"sm\"\n      toggleButton={\n        shouldShowToggle ? (\n          <IconButton\n            size=\"md\"\n            onClick={() => {\n              if (shouldToggleCompactMode) {\n                handleCompactModeToggle();\n              } else {\n                handleToggle();\n              }\n            }}\n          >\n            <MenuOpenIcon />\n          </IconButton>\n        ) : undefined\n      }\n      {...props}\n    >\n      {children}\n    </Navbar>\n  );\n}\n","import {cloneElement, ReactElement} from 'react';\nimport clsx from 'clsx';\n\ninterface DashboardContentProps {\n  children: ReactElement<{className: string}>;\n  isScrollable?: boolean;\n}\nexport function DashboardContent({\n  children,\n  isScrollable = true,\n}: DashboardContentProps) {\n  return cloneElement(children, {\n    className: clsx(\n      children.props.className,\n      isScrollable && 'overflow-y-auto stable-scrollbar',\n      'dashboard-grid-content'\n    ),\n  });\n}\n","import clsx from 'clsx';\nimport {m} from 'framer-motion';\nimport {cloneElement, ReactElement, useContext} from 'react';\nimport {DashboardLayoutContext} from './dashboard-layout-context';\n\nexport interface DashboardSidenavChildrenProps {\n  className?: string;\n  isCompactMode?: boolean;\n}\n\nexport interface SidenavProps {\n  className?: string;\n  children: ReactElement<DashboardSidenavChildrenProps>;\n  position?: 'left' | 'right';\n  size?: 'sm' | 'md' | 'lg' | string;\n  mode?: 'overlay';\n  // absolute will place sidenav between navbar/footer, fixed will overlay it over nav/footer.\n  overlayPosition?: 'absolute' | 'fixed';\n  display?: 'flex' | 'block';\n  overflow?: string;\n  forceClosed?: boolean;\n}\nexport function DashboardSidenav({\n  className,\n  position,\n  children,\n  size = 'md',\n  mode,\n  overlayPosition = 'fixed',\n  display = 'flex',\n  overflow = 'overflow-hidden',\n  forceClosed = false,\n}: SidenavProps) {\n  const {\n    isMobileMode,\n    leftSidenavStatus,\n    setLeftSidenavStatus,\n    rightSidenavStatus,\n    setRightSidenavStatus,\n  } = useContext(DashboardLayoutContext);\n  const status = position === 'left' ? leftSidenavStatus : rightSidenavStatus;\n  const isOverlayMode = isMobileMode || mode === 'overlay';\n\n  const variants = {\n    open: {display, width: null as any},\n    compact: {\n      display,\n      width: null as any,\n    },\n    closed: {\n      width: 0,\n      transitionEnd: {\n        display: 'none',\n      },\n    },\n  };\n\n  const sizeClassName = getSize(status === 'compact' ? 'compact' : size);\n\n  return (\n    <m.div\n      variants={variants}\n      initial={false}\n      animate={forceClosed ? 'closed' : status}\n      transition={{type: 'tween', duration: 0.15}}\n      onClick={e => {\n        // close sidenav when user clicks a link or button on mobile\n        const target = e.target as HTMLElement;\n        if (isMobileMode && (target.closest('button') || target.closest('a'))) {\n          setLeftSidenavStatus('closed');\n          setRightSidenavStatus('closed');\n        }\n      }}\n      className={clsx(\n        className,\n        position === 'left'\n          ? 'dashboard-grid-sidenav-left'\n          : 'dashboard-grid-sidenav-right',\n        'will-change-[width]',\n        overflow,\n        sizeClassName,\n        isOverlayMode && `${overlayPosition} bottom-0 top-0 z-20 shadow-2xl`,\n        isOverlayMode && position === 'left' && 'left-0',\n        isOverlayMode && position === 'right' && 'right-0',\n      )}\n    >\n      {cloneElement<DashboardSidenavChildrenProps>(children, {\n        className: clsx(\n          children.props.className,\n          'w-full h-full',\n          status === 'compact' && 'compact-scrollbar',\n        ),\n        isCompactMode: status === 'compact',\n      })}\n    </m.div>\n  );\n}\n\nfunction getSize(size: SidenavProps['size'] | 'compact'): string {\n  switch (size) {\n    case 'compact':\n      return 'w-80';\n    case 'sm':\n      return 'w-224';\n    case 'md':\n      return 'w-240';\n    case 'lg':\n      return 'w-288';\n    default:\n      return size || '';\n  }\n}\n"],"names":["DashboardLayoutContext","createContext","usePrevious","value","ref","useRef","useEffect","FormattedBytes","memo","bytes","jsx","Fragment","prettyBytes","useBlockBodyOverflow","disable","DashboardLayout","children","leftSidenav","onLeftSidenavChange","rightSidenav","initialRightSidenavStatus","onRightSidenavChange","name","leftSidenavCanBeCompact","height","className","gridClassName","blockBodyOverflow","domProps","isMobile","useMediaQuery","defaultLeftSidenavStatus","useMemo","getFromLocalStorage","leftSidenavStatus","setLeftSidenavStatus","useControlledState","rightSidenavStatusDefault","userSelected","rightSidenavStatus","_setRightSidenavStatus","setRightSidenavStatus","useCallback","status","setInLocalStorage","shouldShowUnderlay","jsxs","clsx","AnimatePresence","Underlay","MenuOpenIcon","createSvgIcon","DashboardNavbar","hideToggleButton","props","isMobileMode","useContext","shouldToggleCompactMode","shouldShowToggle","handleToggle","handleCompactModeToggle","newStatus","Navbar","IconButton","DashboardContent","isScrollable","cloneElement","DashboardSidenav","position","size","mode","overlayPosition","display","overflow","forceClosed","isOverlayMode","variants","sizeClassName","getSize","m","e","target"],"mappings":"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"}